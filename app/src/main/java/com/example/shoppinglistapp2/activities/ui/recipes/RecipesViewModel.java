package com.example.shoppinglistapp2.activities.ui.recipes;

import android.app.Application;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.navigation.Navigation;

import com.example.shoppinglistapp2.db.SlaRepository;
import com.example.shoppinglistapp2.db.tables.Ingredient;
import com.example.shoppinglistapp2.db.tables.Recipe;
import com.example.shoppinglistapp2.helpers.IngredientUtil;

import java.util.ArrayList;
import java.util.List;

public class RecipesViewModel extends AndroidViewModel {

    private final SlaRepository slaRepository;
    private final LiveData<List<Recipe>> allRecipes;

    private Recipe currentRecipe = null;
    private LiveData<List<Ingredient>> currentRecipeIngredients = null;

    public RecipesViewModel(@NonNull Application application) {
        super(application);
        slaRepository = new SlaRepository(application);
        allRecipes = slaRepository.getAllRecipes();
    }

    public LiveData<List<Recipe>> getAllRecipes(){
        return allRecipes;
    }


    /** return the recipe which we are being directed to edit */
    public Recipe getCurrentRecipe() {
        return currentRecipe;
    }

    public void initialiseNewRecipe(){
        //otherwise, initialise a new recipe now
        //first, find a unique name to use as placeholder
        int i = 1;
        String recipeName;
        do {
            recipeName = String.format("Untitled recipe %d", i);
            i++;
        } while(!slaRepository.recipeNameIsUnique(recipeName));

        //create the recipe
        currentRecipe = new Recipe();
        currentRecipe.setName(recipeName);

        //persist it to db
        long id = slaRepository.insertRecipe(currentRecipe);
        //retrieve persisted version with an autogenerated rowid
        currentRecipe = slaRepository.getRecipeByName(currentRecipe.getName());

        //setup livedata to listen to ingredients added to this recipe
        currentRecipeIngredients = slaRepository.getIngredientsByRecipeId((int) id);
    }

    public LiveData<List<Ingredient>> getCurrentRecipeIngredients() {
        return currentRecipeIngredients;
    }

    public void deleteRecipeIngredientAtPosition(int position){

    }

    public void addIngredientsToCurrentRecipe(String... ingredients){

        //add each new item to the database
        for (String ingredientText : ingredients){
            Ingredient ingredient = IngredientUtil.toIngredient(ingredientText);
            slaRepository.insertIngredient(ingredient);
            Log.d("TOM_TEST", "adding item: " + ingredientText);
        }
    }


    public boolean addNewRecipe(Recipe recipe){
        //insert recipe
        long rowId = slaRepository.insertRecipe(recipe);

        if(rowId == -1){
            Log.d("TOM_TEST","Error adding recipe. Please try again later.");
            return false;
        }

        return true;
    }

    public void setRecipeToView(int position){
        currentRecipe = allRecipes.getValue().get(position);
        currentRecipeIngredients = slaRepository.getIngredientsByRecipeId(currentRecipe.getId());
    }

    public void deleteRecipes(Recipe... recipes){
        slaRepository.deleteRecipe(recipes);
    }

    public boolean recipeNameIsUnique(String name){
        return slaRepository.recipeNameIsUnique(name);
    }

    public void updateRecipe(Recipe recipe){
        slaRepository.updateRecipe(recipe);
    }

    public Recipe getRecipeAtPosition(int position){
        return allRecipes.getValue().get(position);
    }
}